else
print("la multiplicacion no se puede realizar")
}
division<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[1]==a[2] && b[1]==b[2]){
if(det(mB)==0){
print("No se puede dividir porque el valor de la determinate es cero")
}
else{
inv<-solve(mB)
result<-mA%*%inv
print(result)
}
}
else
print("no se puede dividir")
}
m1<-matrix(1:6,nrow=2, byrow= T)
m2<-matrix(11:14,nrow=2, byrow= T)
operacion(m1,m2,"/")
#####################
###Nombre: Nelson Puchaicela
###Curso: 6to A
####################
###menu principal
operacion<- function(matrizA, matrizB, opr){
switch(opr,
"+"=suma(matrizA,matrizB),
"-"= resta(matrizA, matrizB),
"*" = multi(matrizA,matrizB),
"/" = division(matrizA,matrizB))
}
#verificar el numero de filas y columnas de las matrices para la suma o resta
#esta funcion retorna un valor booleano
verif<-function(mA,mB){
###sacar las dimenciones de las matrices y compararlas
a<-dim(mA)
b<-dim(mB)
if(a[1]==b[1] && a[2]==b[2]){
return(TRUE)
}
else
return(FALSE)
}
##funcion de suma
suma<- function(mA,mB){
##utilizacion de la funcion de verificacion
if(verif(mA,mB)){
print(mA+mB)
}
else
print("la matrices no son compatibles para la realizacion de la suma")
}
###funcion de resta
resta<-function(mA,mB){
if(verif(mA,mB)){
print(mA-mB)
}
else
print("La resta no se puede realizar porque las matrices no son compatibles o de la misma dimencion")
}
multi<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[2]==b[1] && a[1]==b[2]){
print(mA%*%mB)
}
else
print("la multiplicacion no se puede realizar")
}
division<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[1]==a[2] && b[1]==b[2]){
if(det(mB)==0){
print("No se puede dividir porque el valor de la determinate es cero")
}
else{
inv<-solve(mB)
result<-mA%*%inv
print(result)
}
}
else
print("No se puede dividir")
}
m1<-matrix(1:6,nrow=2, byrow= T)
m2<-matrix(11:14,nrow=2, byrow= T)
operacion(m1,m2,"*")
#####################
###Nombre: Nelson Puchaicela
###Curso: 6to A
####################
###menu principal
operacion<- function(matrizA, matrizB, opr){
switch(opr,
"+"=suma(matrizA,matrizB),
"-"= resta(matrizA, matrizB),
"*" = multi(matrizA,matrizB),
"/" = division(matrizA,matrizB))
}
#verificar el numero de filas y columnas de las matrices para la suma o resta
#esta funcion retorna un valor booleano
verif<-function(mA,mB){
###sacar las dimenciones de las matrices y compararlas
a<-dim(mA)
b<-dim(mB)
if(a[1]==b[1] && a[2]==b[2]){
return(TRUE)
}
else
return(FALSE)
}
##funcion de suma
suma<- function(mA,mB){
##utilizacion de la funcion de verificacion
if(verif(mA,mB)){
print(mA+mB)
}
else
print("la matrices no son compatibles para la realizacion de la suma")
}
###funcion de resta
resta<-function(mA,mB){
if(verif(mA,mB)){
print(mA-mB)
}
else
print("La resta no se puede realizar porque las matrices no son compatibles o de la misma dimencion")
}
multi<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[2]==b[1] && a[1]==b[2]){
print(mA%*%mB)
}
else
print("la multiplicacion no se puede realizar")
}
division<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[1]==a[2] && b[1]==b[2]){
if(det(mB)==0){
print("No se puede dividir porque el valor de la determinate es cero")
}
else{
inv<-solve(mB)
result<-mA%*%inv
print(result)
}
}
else
print("No se puede dividir")
}
m1<-matrix(1:4,nrow=2, byrow= T)
m2<-matrix(11:14,nrow=2, byrow= T)
operacion(m1,m2,"*")
#####################
###Nombre: Nelson Puchaicela
###Curso: 6to A
####################
###menu principal
operacion<- function(matrizA, matrizB, opr){
switch(opr,
"+"=suma(matrizA,matrizB),
"-"= resta(matrizA, matrizB),
"*" = multi(matrizA,matrizB),
"/" = division(matrizA,matrizB))
}
#verificar el numero de filas y columnas de las matrices para la suma o resta
#esta funcion retorna un valor booleano
verif<-function(mA,mB){
###sacar las dimenciones de las matrices y compararlas
a<-dim(mA)
b<-dim(mB)
if(a[1]==b[1] && a[2]==b[2]){
return(TRUE)
}
else
return(FALSE)
}
##funcion de suma
suma<- function(mA,mB){
##utilizacion de la funcion de verificacion
if(verif(mA,mB)){
print(mA+mB)
}
else
print("la matrices no son compatibles para la realizacion de la suma")
}
###funcion de resta
resta<-function(mA,mB){
if(verif(mA,mB)){
print(mA-mB)
}
else
print("La resta no se puede realizar porque las matrices no son compatibles o de la misma dimencion")
}
multi<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[2]==b[1] && a[1]==b[2]){
print(mA%*%mB)
}
else
print("la multiplicacion no se puede realizar")
}
division<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[1]==a[2] && b[1]==b[2]){
if(det(mB)==0){
print("No se puede dividir porque el valor de la determinate es cero")
}
else{
inv<-solve(mB)
result<-mA%*%inv
print(result)
}
}
else
print("No se puede dividir")
}
m1<-matrix(1:4,nrow=2, byrow= T)
m2<-matrix(1:4,nrow=2, byrow= T)
operacion(m1,m2,"*")
#####################
###Nombre: Nelson Puchaicela
###Curso: 6to A
####################
###menu principal
operacion<- function(matrizA, matrizB, opr){
switch(opr,
"+"=suma(matrizA,matrizB),
"-"= resta(matrizA, matrizB),
"*" = multi(matrizA,matrizB),
"/" = division(matrizA,matrizB))
}
#verificar el numero de filas y columnas de las matrices para la suma o resta
#esta funcion retorna un valor booleano
verif<-function(mA,mB){
###sacar las dimenciones de las matrices y compararlas
a<-dim(mA)
b<-dim(mB)
if(a[1]==b[1] && a[2]==b[2]){
return(TRUE)
}
else
return(FALSE)
}
##funcion de suma
suma<- function(mA,mB){
##utilizacion de la funcion de verificacion
if(verif(mA,mB)){
print(mA+mB)
}
else
print("la matrices no son compatibles para la realizacion de la suma")
}
###funcion de resta
resta<-function(mA,mB){
if(verif(mA,mB)){
print(mA-mB)
}
else
print("La resta no se puede realizar porque las matrices no son compatibles o de la misma dimencion")
}
multi<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[2]==b[1] && a[1]==b[2]){
print(mA%*%mB)
}
else
print("la multiplicacion no se puede realizar")
}
division<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[1]==a[2] && b[1]==b[2]){
if(det(mB)==0){
print("No se puede dividir porque el valor de la determinate es cero")
}
else{
inv<-solve(mB)
result<-mA%*%inv
print(result)
}
}
else
print("No se puede dividir")
}
m1<-matrix(1:4,nrow=2, byrow= T)
m2<-matrix(1:4,nrow=2, byrow= T)
operacion(m1,m2,"-")
#####################
###Nombre: Nelson Puchaicela
###Curso: 6to A
####################
###menu principal
operacion<- function(matrizA, matrizB, opr){
switch(opr,
"+"=suma(matrizA,matrizB),
"-"= resta(matrizA, matrizB),
"*" = multi(matrizA,matrizB),
"/" = division(matrizA,matrizB))
}
#verificar el numero de filas y columnas de las matrices para la suma o resta
#esta funcion retorna un valor booleano
verif<-function(mA,mB){
###sacar las dimenciones de las matrices y compararlas
a<-dim(mA)
b<-dim(mB)
if(a[1]==b[1] && a[2]==b[2]){
return(TRUE)
}
else
return(FALSE)
}
##funcion de suma
suma<- function(mA,mB){
##utilizacion de la funcion de verificacion
if(verif(mA,mB)){
print(mA+mB)
}
else
print("la matrices no son compatibles para la realizacion de la suma")
}
###funcion de resta
resta<-function(mA,mB){
if(verif(mA,mB)){
print(mA-mB)
}
else
print("La resta no se puede realizar porque las matrices no son compatibles o de la misma dimencion")
}
multi<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[2]==b[1] && a[1]==b[2]){
print(mA%*%mB)
}
else
print("la multiplicacion no se puede realizar")
}
division<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[1]==a[2] && b[1]==b[2]){
if(det(mB)==0){
print("No se puede dividir porque el valor de la determinate es cero")
}
else{
inv<-solve(mB)
result<-mA%*%inv
print(result)
}
}
else
print("No se puede dividir")
}
m1<-matrix(1:4,nrow=2, byrow= T)
m2<-matrix(1:4,nrow=2, byrow= T)
operacion(m1,m2,"+")
#####################
###Nombre: Nelson Puchaicela
###Curso: 6to A
####################
###menu principal
principal<- function(matrizA, matrizB, opr){
switch(opr,
"+"=suma(matrizA,matrizB),
"-"= resta(matrizA, matrizB),
"*" = multi(matrizA,matrizB),
"/" = division(matrizA,matrizB))
}
#verificar el numero de filas y columnas de las matrices para la suma o resta
#esta funcion retorna un valor booleano
verif<-function(mA,mB){
###sacar las dimenciones de las matrices y compararlas
a<-dim(mA)
b<-dim(mB)
if(a[1]==b[1] && a[2]==b[2]){
return(TRUE)
}
else
return(FALSE)
}
##funcion de suma
suma<- function(mA,mB){
##utilizacion de la funcion de verificacion
if(verif(mA,mB)){
print(mA+mB)
}
else
print("la matrices no son compatibles para la realizacion de la suma")
}
###funcion de resta
resta<-function(mA,mB){
if(verif(mA,mB)){
print(mA-mB)
}
else
print("La resta no se puede realizar porque las matrices no son compatibles o de la misma dimencion")
}
multi<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[2]==b[1] && a[1]==b[2]){
print(mA%*%mB)
}
else
print("la multiplicacion no se puede realizar")
}
division<-function(mA,mB){
a<-dim(mA)
b<-dim(mB)
if(a[1]==a[2] && b[1]==b[2]){
if(det(mB)==0){
print("No se puede dividir porque el valor de la determinate es cero")
}
else{
inv<-solve(mB)
result<-mA%*%inv
print(result)
}
}
else
print("No se puede dividir")
}
##declaraciÃ³n de variables
m1<-matrix(1:4,nrow=2, byrow= T)
m2<-matrix(1:4,nrow=2, byrow= T)
##llamado a la funcion principal
principal(m1,m2,"+")
x<-seq(-pi:pi,length=65)
y<-sin(x)
plot(x,y,type="l",col="green", main="seno",xlab="ejex",ylab = "ejey",sub = "subtitulo")
x<-seq(-pi:pi,length=65)
y<-sin(x)
plot(x,y,type="l",col="green", main="seno",xlab="ejex",ylab = "ejey",sub = "subtitulo")
x<-seq(-pi,pi,length=65)
y<-sin(x)
plot(x,y,type="l",col="green", main="seno",xlab="ejex",ylab = "ejey",sub = "subtitulo")
plot(x,y,type="-",col="green", main="seno",xlab="ejex",ylab = "ejey",sub = "subtitulo")
plot(x,y,type="s",col="green", main="seno",xlab="ejex",ylab = "ejey",sub = "subtitulo")
plot(x,y,type="s",col="green", main="seno",xlab=expression(phi),ylab = "ejey",sub = "subtitulo")
plot(x,y,type="s",col="green", main="seno",xlab=expression(phi),ylab = expression(f(phi)),sub = "subtitulo")
abline(h=-1:1,v=pi/2*(-6:6),col="gray90")
lines(x,cose,col="red",lty=2)
lines(x,cose,col="red",lty=2)
cose<-cos(x)
#lty es la forma de la linea
lines(x,cose,col="red",lty=2)
legend(-3,0.9)
legend(-3,0.9,c("Seno","Coseno"),lty=1:2)
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6))
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6))
legend(-3,1.1,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6))
legend(-3,1.1,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6))
legend(-3,1.5,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6))
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6))
plot(x,y,type="s",col="green", main="seno",xlab=expression(phi),ylab = expression(f(phi)),sub = "subtitulo")
#crear cuadrantes,h son para valores horizontales y v valores verticales
abline(h=-1:1,v=pi/2*(-6:6),col="gray90")
cose<-cos(x)
#lty es la forma de la linea
lines(x,cose,col="red",lty=2)
#poner un cajon de informacion
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6))
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6),col("green","red"))
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6),col=c("green","red"))
x<-seq(-pi,pi,length=65)
y<-sin(x)
plot(x,y,type="s",col="green", main="seno",xlab=expression(phi),ylab = expression(f(phi)),sub = "subtitulo")
#crear cuadrantes,h son para valores horizontales y v valores verticales
abline(h=-1:1,v=pi/2*(-6:6),col="gray90")
cose<-cos(x)
#lty es la forma de la linea
lines(x,cose,col="red",lty=2)
#poner un cajon de informacion
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6),col=c("green","red"))
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0),col=c("green","red"))
.6
.6
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6),col=c("green","red"))
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(-1,0.6),col=c("green","red"))
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(5,0.6),col=c("green","red"))
0
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6),col=c("green","red"))
plot(x,y,type="s",col="green", main="seno",xlab=expression(phi),ylab = expression(f(phi)),sub = "subtitulo")
#crear cuadrantes,h son para valores horizontales y v valores verticales
abline(h=-1:1,v=pi/2*(-6:6),col="gray90")
cose<-cos(x)
#lty es la forma de la linea
lines(x,cose,col="red",lty=2)
#poner un cajon de informacion
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6),col=c("green","red"))
plot(x,y,type="l",col="green", main="seno",xlab=expression(phi),ylab = expression(f(phi)),sub = "subtitulo")
#crear cuadrantes,h son para valores horizontales y v valores verticales
abline(h=-1:1,v=pi/2*(-6:6),col="gray90")
cose<-cos(x)
#lty es la forma de la linea
lines(x,cose,col="red",lty=2)
#poner un cajon de informacion
legend(-3,0.9,c("Seno","Coseno"),lty=1:2,adj = c(0,0.6),col=c("green","red"))
getwd()
setwd("Users/rogerpuchaicela/Documents/Simulacion")
setwd("Users/rogerpuchaicela/Documents/Simulacion")
